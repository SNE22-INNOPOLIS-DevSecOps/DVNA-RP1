pipelime{
    agent any

    stages {
        stage("Sending the Alerts") {
            steps {
                scripts{
                    telegramSend (
                        token: '',
                        chatId: '',
                        message: "The job build and test has started and is currently running"
                    )
                }
            }
        }

        stage("Dependency Check") {
            steps {
                dependencyCheck additionalArguments: '--disabkeYarnAudit --format HTML', odcInstallation: 'Dependency Check'

            }
        }

        stage("Installation") {
            steps {
                sh '''
                 sudo apt-get update
                 sudo apt purge npm -y
                 sudo apt install npm -y
                 sudo docker info
                 '''
                 echo "Necessary Updates and Installations are done.."
            }
        }

        stage("Build") {
            steps {
                sh ''' 
                docker rm -f dvna-app | true
                docker rmi dvna-sne22-rp1 | true
                '''
                echo "purged previous build instances..!!"
                echo "Building new container images"
                sh ''' 
                docker build -t dvna-sne22-rp1 -f Dockerfile
                '''
                echo "Container images successfully built..!!"
            }
        }

        stage ("Fetching the Credentials") {
            steps {
                withCredentials([vaultString(credentialsId: 'Vault_MySQL_DB', variable: 'env')]) {
                    sh 'echo $ env > /home/sne22/env/vars.env | true'
                }
            }
        }

        stage("Testing the Docker image") {
            steps {
                synkSecurity additionalArguments: '--docker dvna-sne-22-rp1', failOnError: false, failOnIssue: false severity: 'critical', synkInstallation: 'Snyk' snyTokenId: 'Snyk-Jenkins', targetFile: 'Dockerfile'
            }
        }

        stage("Pushing the Docker image to the DockerHub") {
            steps {
                echo "Pushing the Docker image to the DockerHub.."
                sh ''' 
                docker login -u shashikr2912 -p $doc_pass docker.io
                docker tag dvna-sne22-rp1 shashikr2912/dvna-sne22-rp1:1.4
                docker push shashikr2912/dvna-sne22-rp1:1.4
                '''
                echo "Container image was successfully pushed..."
            }
        }

        stage("Cleaning the things") {
            steps {
                echo "Initializing the cleanup" 
                sh 'sudo docker-compose -f docker-compose-build.yml down'
                echo "Removed the container runtime"
                sh 'docker image prune -a'
                echo "Removed the Docker image.."
            }
        }

        post {
            success {
                script {
                    telegramSend(
                        token: '',
                        chatId: env.Telegram_ChatID,
                        message: "The job build and test has completed successfully"
                    )
                }
            }
        }
        failure{
            script {
                def failureCause = currentBuild.getResult().toString()
                telegramSend (
                    token: '',
                    chatId: env.Telegram_ChatID,
                    message: "Teh job build and test has failed due to the ${failureCause}."
                )
            }
        }
    }
}
